			 ASSIGNMENT NO :9
Title: C-19 A Dictionary stores keywords and its meanings. Provide facility for adding new keywords, deleting keywords, updating values of any entry. Provide facility to display whole data sorted in ascending/ Descending order. Also find how many maximum comparisons may
require for finding any keyword. Use Height balance tree and find the complexity for finding
a keyword
Code :

#include <iostream>
#include <map>
#include <string>
using namespace std;
class Dictionary {
map<string, string> dict;
public:
    void insert(string keyword, string meaning) {
     dict[keyword] = meaning;
    }
void remove(string keyword) {
    dict.erase(keyword);
    }
    void displayAscending() {
     for (const auto &entry : dict)
     cout << entry.first << " : " << entry.second << endl;
    }
     void displayDescending() {
     for (auto it = dict.rbegin(); it != dict.rend(); ++it)
     cout << it->first << " : " << it->second << endl;
    }
     void search(string keyword) {
     auto it = dict.find(keyword);
        if (it != dict.end())
        cout << "Keyword found: " << it->first << " -> " << it->second << endl;
        else
            cout << "Keyword not found." << endl;
    }
};
int main() {
    Dictionary dict;
    int choice;
    string keyword, meaning;
    do {
    cout << "\n1. Insert\n2. Delete\n3. Display Ascending\n4. Display Descending\n5. Search\n6. Exit\nEnter choice: ";
        cin >> choice;
        switch (choice) {
        case 1:
            cout << "Enter keyword: ";
            cin >> keyword;
            cout << "Enter meaning: ";
            cin.ignore();
            getline(cin, meaning);
            dict.insert(keyword, meaning);
            break;
        case 2:
            cout << "Enter keyword to delete: ";
            cin >> keyword;
            dict.remove(keyword);
            break;
        case 3:
            dict.displayAscending();
            break;
        case 4:
            dict.displayDescending();
            break;
        case 5:
            cout << "Enter keyword to search: ";
            cin >> keyword;
            dict.search(keyword);
            break;
        case 6:
            cout << "Exiting program." << endl;
            break;
        default:
            cout << "Invalid choice!" << endl;
        }
    } while (choice != 6);
    return 0;
}


Output :
1. Insert
2. Delete
3. Display Ascending
4. Display Descending
5. Search
6. Exit
Enter choice: 1
Enter keyword: 1 2 3 4 5
Enter meaning: 
1. Insert
2. Delete
3. Display Ascending
4. Display Descending
5. Search
6. Exit
Enter choice: 2
Enter keyword to delete: 2

1. Insert
2. Delete
3. Display Ascending
4. Display Descending
5. Search
6. Exit
Enter choice: 3
1 : 2 3 4 5

1. Insert
2. Delete
3. Display Ascending
4. Display Descending
5. Search
6. Exit
Enter choice: 4
1 : 2 3 4 5

1. Insert
2. Delete
3. Display Ascending
4. Display Descending
5. Search
6. Exit
Enter choice: 5
Enter keyword to search: 4
Keyword not found.

1. Insert
2. Delete
3. Display Ascending
4. Display Descending
5. Search
6. Exit
Enter choice: 6
Exiting program.




